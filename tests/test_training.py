import pytest
import numpy as np
import joblib
import mlflow
from model_pipeline import train_model
from sklearn.ensemble import RandomForestClassifier

# ğŸ“Œ Configuration de MLflow
MLFLOW_TRACKING_URI = "http://127.0.0.1:5000"
EXPERIMENT_NAME = "Churn Prediction Experiment"

mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)

# VÃ©rifier si l'expÃ©rience MLflow existe, sinon la crÃ©er
experiment = mlflow.get_experiment_by_name(EXPERIMENT_NAME)

if experiment is None:
    experiment_id = mlflow.create_experiment(EXPERIMENT_NAME)
    print(f"âœ… ExpÃ©rience crÃ©Ã©e avec l'ID : {experiment_id}")
else:
    print(f"ğŸ”„ L'expÃ©rience '{EXPERIMENT_NAME}' existe dÃ©jÃ  avec l'ID : {experiment.experiment_id}")

mlflow.set_experiment(EXPERIMENT_NAME)

# ğŸ“Œ Test 2 : VÃ©rifier que le modÃ¨le s'entraÃ®ne correctement
def test_train_model():
    """Teste l'entraÃ®nement du modÃ¨le RandomForestClassifier"""
    
    # ğŸ”¹ GÃ©nÃ©rer des donnÃ©es alÃ©atoires
    X_train = np.random.rand(100, 5)
    y_train = np.random.randint(0, 2, 100)
    
    # ğŸ”¹ EntraÃ®ner le modÃ¨le
    model = train_model(X_train, y_train)

    # âœ… VÃ©rifier que le modÃ¨le est bien entraÃ®nÃ©
    assert model is not None, "Le modÃ¨le est None aprÃ¨s l'entraÃ®nement"
    assert isinstance(model, RandomForestClassifier), "Le modÃ¨le n'est pas un RandomForestClassifier"

    # ğŸ”¹ Tester la prÃ©diction sur un Ã©chantillon
    sample_data = np.random.rand(1, 5)
    prediction = model.predict(sample_data)

    assert prediction is not None, "La prÃ©diction du modÃ¨le est None"

    # ğŸ”¹ Sauvegarder et recharger le modÃ¨le pour tester sa persistance
    model_path = "models/test_model.pkl"
    joblib.dump(model, model_path)
    loaded_model = joblib.load(model_path)

    assert loaded_model is not None, "Le modÃ¨le chargÃ© est None"
    
    print("âœ… Test d'entraÃ®nement du modÃ¨le rÃ©ussi !")
