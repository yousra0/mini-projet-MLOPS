# Import des biblioth√®ques n√©cessaires
import argparse  # Pour g√©rer les arguments pass√©s en ligne de commande
import logging  # Pour afficher des messages d'information ou d'erreur
import os  # Pour interagir avec le syst√®me de fichiers

# Import des fonctions du module model_pipeline
from model_pipeline import prepare_data, train_model, evaluate_model, save_model, load_model

from sklearn.model_selection import GridSearchCV, cross_val_score
import time
######################################################################################################

#utilisation de la biblioth√®que logging pour mieux suivre le d√©roulement 
#de l'ex√©cution et g√©rer les erreurs efficacement

# Configuration du syst√®me de logging pour afficher les messages avec un format clair
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

######################################################################################################
#PREPARE DATA
# Fonction : Charger les donn√©es depuis un fichier CSV
def charger_donnees(data_path: str):
    """V√©rifie l'existence du fichier CSV et pr√©pare les donn√©es"""
    if not os.path.isfile(data_path):  # V√©rifie si le fichier existe
        logging.error(f"‚ùå Le fichier {data_path} n'existe pas.")
        return None
    logging.info(f"üìÇ Chargement des donn√©es depuis {data_path}...")
    return prepare_data(data_path)  # Pr√©pare les donn√©es pour l'entra√Ænement

######################################################################################################
#LOAD MODEL
# Fonction : Charger un mod√®le pr√©-entra√Æn√© depuis un fichier
def charger_modele(model_path: str):
    """Charge un mod√®le existant si le fichier est valide"""
    if not os.path.isfile(model_path):  # V√©rifie si le mod√®le existe
        logging.error("‚ùå Le fichier du mod√®le sp√©cifi√© n'existe pas.")
        return None
    logging.info(f"üîÑ Chargement du mod√®le depuis {model_path}...")
    model = load_model(model_path)
    if model:
        logging.info("‚úÖ Mod√®le charg√© avec succ√®s !")
    return model

######################################################################################################
#TRAIN MODEL
# Fonction : Entra√Æner un nouveau mod√®le
def entrainer_modele(X_train, y_train):
    """Entra√Æne un mod√®le avec recherche d'hyperparam√®tres et validation crois√©e"""
    from sklearn.ensemble import RandomForestClassifier

    logging.info("üöÄ Entra√Ænement du mod√®le avec validation crois√©e et recherche d'hyperparam√®tres...")

    # üîç D√©finition des hyperparam√®tres √† tester
    param_grid = {
        'n_estimators': [100, 200, 300],
        'max_depth': [None, 10, 20],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4]
    }

    # üå≤ Initialisation du mod√®le
    model = RandomForestClassifier(random_state=42)

    # üîç Recherche des meilleurs hyperparam√®tres avec GridSearchCV
    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, n_jobs=-1, verbose=1)

    # ‚è±Ô∏è Mesure du temps d'entra√Ænement
    start_time = time.time()
    grid_search.fit(X_train, y_train)
    end_time = time.time()

    # üìä Affichage des r√©sultats
    best_model = grid_search.best_estimator_
    logging.info(f"‚úÖ Meilleurs hyperparam√®tres : {grid_search.best_params_}")
    logging.info(f"‚è±Ô∏è Temps d'entra√Ænement : {end_time - start_time:.2f} secondes")

    # üìà Validation crois√©e
    cv_scores = cross_val_score(best_model, X_train, y_train, cv=5)
    logging.info(f"üìä Score moyen en validation crois√©e : {cv_scores.mean():.4f}")

    return best_model

######################################################################################################
#SAVE MODEL
# Fonction : Sauvegarder un mod√®le entra√Æn√©
def sauvegarder_modele(model, save_path: str):
    """Sauvegarde le mod√®le entra√Æn√© dans un fichier"""
    save_model(model, save_path)
    logging.info(f"üíæ Mod√®le sauvegard√© sous {save_path}")

######################################################################################################
#EVALUATE MODEL
# Fonction : √âvaluer les performances du mod√®le
def evaluer_modele(model, X_test, y_test):
    """√âvalue les performances du mod√®le avec des donn√©es de test"""
    logging.info("üìä √âvaluation du mod√®le en cours...")
    metrics = evaluate_model(model, X_test, y_test)  # Retourne les m√©triques (pr√©cision, rappel, etc.)
    logging.info("‚úÖ R√©sultats de l'√©valuation :")
    for metric, value in metrics.items():
        logging.info(f"   {metric}: {value:.4f}")  # Affiche les m√©triques avec 4 d√©cimales

######################################################################################################

# Fonction principale : Contr√¥le l'ex√©cution du script
def main():
    # üìå Utilisation d'argparse pour g√©rer les arguments en ligne de commande
    parser = argparse.ArgumentParser(description='Pipeline de Mod√©lisation du Churn')
    parser.add_argument('--data', type=str, required=True, help='Chemin du fichier CSV')
    parser.add_argument('--train', action='store_true', help='Entra√Æner le mod√®le')
    parser.add_argument('--evaluate', action='store_true', help='√âvaluer le mod√®le')
    parser.add_argument('--save', type=str, default='random_forest_model.pkl', help='Nom du fichier pour sauvegarder le mod√®le')
    parser.add_argument('--load', type=str, help='Charger un mod√®le sauvegard√©')

    # üì• R√©cup√©ration des arguments fournis par l'utilisateur
    args = parser.parse_args()

    # ‚úÖ √âtape 1 : Charger les donn√©es depuis le fichier CSV
    result = charger_donnees(args.data)
    if result is None:
        return  # Arr√™te l'ex√©cution si le fichier CSV est invalide
    X_train, X_test, y_train, y_test, scaler = result

    # ‚úÖ √âtape 2 : Charger un mod√®le existant si demand√©
    model = None
    if args.load:
        model = charger_modele(args.load)

    # ‚úÖ √âtape 3 : Entra√Æner un nouveau mod√®le si demand√©
    if args.train:
        model = entrainer_modele(X_train, y_train)

    # ‚úÖ √âtape 4 : V√©rifier si un mod√®le est disponible
    if model is None:
        logging.warning("‚ö†Ô∏è Aucun mod√®le trouv√© ! Entra√Ænez-en un ou chargez-en un avec --load.")
        return

    # ‚úÖ √âtape 5 : Sauvegarder le mod√®le entra√Æn√©
    if args.save:
        sauvegarder_modele(model, args.save)

    # ‚úÖ √âtape 6 : √âvaluer le mod√®le si demand√©
    if args.evaluate:
        evaluer_modele(model, X_test, y_test)

######################################################################################################

# üî• Point d'entr√©e du programme
if __name__ == '__main__':
    main()
