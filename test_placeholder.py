import pytest
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from yousra_chaieb_ml_project.data_pipeline import prepare_data  # ğŸ“Œ Import correct
from yousra_chaieb_ml_project.training_pipeline import train_model  # ğŸ“Œ Import correct

# ğŸ“Œ 1. Test unitaire pour la prÃ©paration des donnÃ©es
def test_prepare_data():
    """ Teste si prepare_data() fonctionne correctement. """
    X_train, X_test, y_train, y_test, scaler = prepare_data("data/sample.csv")
    
    # VÃ©rifier que les jeux d'entraÃ®nement et de test ne sont pas vides
    assert X_train.shape[0] > 0
    assert X_test.shape[0] > 0

    # VÃ©rifier que le nombre de caractÃ©ristiques est le mÃªme dans X_train et X_test
    assert X_train.shape[1] == X_test.shape[1]

    print("âœ… Test unitaire : prepare_data() rÃ©ussi !")

# ğŸ“Œ 2. Test unitaire pour l'entraÃ®nement du modÃ¨le
def test_train_model():
    """ Teste si train_model() entraÃ®ne correctement un modÃ¨le Random Forest. """
    X_train = np.random.rand(100, 5)  # DonnÃ©es factices
    y_train = np.random.randint(0, 2, 100)  # Classes 0 ou 1

    model = train_model(X_train, y_train)

    # VÃ©rifier que le modÃ¨le est bien entraÃ®nÃ©
    assert model is not None
    assert isinstance(model, RandomForestClassifier)

    print("âœ… Test unitaire : train_model() rÃ©ussi !")

# ğŸ“Œ 3. Test fonctionnel : VÃ©rifie que l'entraÃ®nement fonctionne avec des donnÃ©es rÃ©elles
def test_pipeline():
    """ Teste si le pipeline complet fonctionne. """
    X_train, X_test, y_train, y_test, scaler = prepare_data("data/sample.csv")
    model = train_model(X_train, y_train)

    # VÃ©rifier que le modÃ¨le peut faire des prÃ©dictions
    y_pred = model.predict(X_test)

    assert len(y_pred) == len(y_test)

    print("âœ… Test fonctionnel : Pipeline complet rÃ©ussi !")
